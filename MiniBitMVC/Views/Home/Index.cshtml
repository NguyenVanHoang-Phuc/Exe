@model MiniBitMVC.Models.ExpenseModels.DashboardViewModel
@{
    ViewData["Title"] = "Trang chủ";
    var userIdFromSession = Context.Session.GetInt32("UserId") ?? 0;
    var isPremium = Context.Session.GetInt32("IsPremium") ?? 0;
}

<!-- MiniBit Character -->
<div class="container mt-4">
    <div class="minibit-character" id="minibitCharacter">
        <div class="character-avatar">
            <span class="character-emoji">🍃</span>
        </div>
        <div class="character-message">
            <p id="characterMessage">Chào bạn! Hôm nay bạn chưa ghi nhận chi tiêu nào nhé! 💚</p>
        </div>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}


<!-- Notifications -->
<div class="container mt-3" id="notificationsContainer">
    @if (Model.Notifications.Any())
    {
        @foreach (var notification in Model.Notifications)
        {
            <div class="alert alert-warning alert-dismissible fade show" role="alert">
                <i class="fas fa-bell me-2"></i>
                @notification
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }
    }
</div>

<div class="container mt-4">
    <!-- Navigation Tabs -->
    <ul class="nav nav-pills nav-fill minibit-tabs mb-4" id="mainTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="dashboard-tab" data-bs-toggle="pill" data-bs-target="#dashboard" type="button" role="tab">
                <i class="fas fa-chart-pie me-2"></i>Tổng quan
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="expenses-tab" data-bs-toggle="pill" data-bs-target="#expenses" type="button" role="tab">
                <i class="fas fa-wallet me-2"></i>Chi tiêu
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="goals-tab" data-bs-toggle="pill" data-bs-target="#goals" type="button" role="tab">
                <i class="fas fa-bullseye me-2"></i>Mục tiêu
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="analytics-tab" data-bs-toggle="pill" data-bs-target="#analytics" type="button" role="tab">
                <i class="fas fa-chart-line me-2"></i>Phân tích
            </button>
        </li>
    </ul>

    <div class="tab-content" id="mainTabContent">
        <!-- Dashboard Tab -->
        <div class="tab-pane fade show active" id="dashboard" role="tabpanel">
            <div class="row g-4 mb-4">
                <!-- Today's Spending -->
                <div class="col-md-4">
                    <div class="card minibit-card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="card-title mb-0">Chi tiêu hôm nay</h6>
                                <i class="fas fa-coins text-primary"></i>
                            </div>
                            <h3 class="text-primary mb-2" id="todayTotal">@Model.TodayTotal.ToString("N0")đ</h3>
                            <small class="text-muted">Giới hạn: <span id="dailyLimitDisplay">@Model.SavingsGoal.DailyLimit.ToString("N0")đ</span></small>
                        </div>
                    </div>
                </div>

                <!-- Monthly Spending -->
                <div class="col-md-4">
                    <div class="card minibit-card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="card-title mb-0">Chi tiêu tháng này</h6>
                                <i class="fas fa-calendar text-success"></i>
                            </div>
                            <h3 class="text-success mb-2" id="monthlyTotal">@Model.MonthlyTotal.ToString("N0")đ</h3>
                            <small class="text-muted">Mục tiêu: Chi tiêu dưới <span id="monthlyTargetDisplay">@Model.SavingsGoal.MonthlyTarget.ToString("N0")đ</span></small>
                        </div>
                    </div>
                </div>

                <!-- Savings -->
                <div class="col-md-4">
                    <div class="card minibit-card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="card-title mb-0">Tiết kiệm dự kiến</h6>
                                <i class="fas fa-piggy-bank text-warning"></i>
                            </div>
                            <h3 class="mb-2" id="savingsAmount">@Model.MonthlySavings.ToString("N0")đ</h3>
                            <small class="text-muted" id="savingsStatus">
                                @(Model.MonthlySavings >= 0 ? "Đang tiết kiệm tốt!" : "Cần cải thiện!")
                            </small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Expenses -->
            <div class="card minibit-card">
                <div class="card-header">
                    <h5 class="mb-0">Giao dịch gần đây</h5>
                </div>
                <div class="card-body p-0">
                    @if (!Model.Transactions.Any())
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-receipt fa-3x text-muted mb-3"></i>
                            <p class="text-muted">Chưa có giao dịch nào được ghi nhận</p>
                        </div>
                    }
                    else
                    {
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>Ngày</th>
                                    <th>Mô tả</th>
                                    <th>Danh mục</th>
                                    <th>Loại</th>
                                    <th class="text-end">Số tiền</th>
                                    <th>Đánh giá</th>
                                    <th>Hành động</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var transaction in Model.Transactions
                                                            .OrderByDescending(t => t.TransactionDate)
                                                            .Take(5))
                                {
                                    <tr>
                                        <td class="date-cell" data-date="@transaction.TransactionDate.ToString("yyyy-MM-dd")">
                                            @transaction.TransactionDate.ToString("dd/MM/yyyy")
                                        </td>
                                        <td class="description-cell">@transaction.Description</td>
                                        <td>
                                            <select class="form-select form-select-sm category-select" data-id="@transaction.TransactionId">
                                                @foreach (var category in Model.Categories) 
                                                {
                                                    if (transaction.CategoryId == category.CategoryId)
                                                    {
                                                        <option value="@category.CategoryId" selected>@category.Name</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@category.CategoryId">@category.Name</option>
                                                    }
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            Chi tiêu
                                        </td>
                                        <td class="text-end amount-cell">
                                            <span class="amount-value @(transaction.Amount < 0 ? "text-danger" : "text-success")">
                                                @transaction.Amount.ToString("N0")đ
                                            </span>
                                        </td>   
                                        <td class="text-center">
                                            <span class="rating-icon" data-id="@transaction.TransactionId" data-rating="@transaction.TransactionType">
                                                @* 3 trạng thái: null / good / bad *@
                                                @if (transaction.TransactionType == "Good")
                                                {
                                                    <i class="fas fa-thumbs-up text-success"></i>
                                                }
                                                else if (transaction.TransactionType == "Bad")
                                                {
                                                    <i class="fas fa-thumbs-down text-danger"></i>
                                                }
                                                else if (transaction.TransactionType == null)
                                                {
                                                    <i class="fas fa-circle text-secondary"></i> @* màu xám *@
                                                }
                                            </span>
                                        </td>
                                        <td class="text-center">
                                            <button class="btn btn-sm btn-primary me-1 update-btn" data-id="@transaction.TransactionId">Update</button>
                                            <button class="btn btn-sm btn-danger delete-btn" data-id="@transaction.TransactionId">Xóa</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>

        </div>

        <!-- Expenses Tab -->
        <div class="tab-pane fade" id="expenses" role="tabpanel">
            <!-- Import + Add -->
            <div class="card minibit-card mb-4">
                <div class="card-body">
                    <div class="expense-toolbar d-flex flex-wrap gap-2 align-items-center justify-content-between">
                        <div class="d-flex flex-wrap gap-2">
                            <!-- Form upload CSV/XLSX -->
                            <form id="importForm" method="post" enctype="multipart/form-data" action="/Home/ImportTransactions">
                                <input type="file" id="fileInput" name="file" accept=".csv,.xlsx"
                                       style="display:none" onchange="document.getElementById('importForm').submit()">
                                <button type="button" class="btn btn-outline-success btn-sm"
                                        onclick="document.getElementById('fileInput').click()">
                                    <i class="fas fa-file-import me-1"></i>Nhập CSV/XLSX
                                </button>

                                <div class="form-text text-muted small mt-1">
                                    Hiện tại hệ thống chỉ hỗ trợ file CSV/XLSX của ngân hàng <strong>MB</strong>.
                                    Các ngân hàng khác sẽ được cập nhật sau.
                                </div>
                            </form>
                        </div>
                        <button class="btn btn-outline-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addBudgetModal">
                            <i class="fas fa-wallet me-1"></i>Thêm Ngân sách
                        </button>
                        <div class="d-flex gap-2">
                            <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addExpenseModal">
                                <i class="fas fa-plus me-1"></i>Thêm chi tiêu
                            </button>
                        </div>
                    </div>
                </div>
            </div>


            <!-- 3 pill thống kê -->
            <div class="row g-3 mb-4">
                <div class="col-md-4">
                    <div class="stat-pill">
                        <div class="label"><i class="fas fa-calendar-day me-2"></i>Hôm nay</div>
                        <div class="value text-primary" id="pillToday">@Model.TodayTotal.ToString("N0")đ</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="stat-pill">
                        <div class="label"><i class="fas fa-calendar-alt me-2"></i>Tháng này</div>
                        <div class="value text-success" id="pillMonth">@Model.MonthlyTotal.ToString("N0")đ</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="stat-pill">
                        <div class="label"><i class="fas fa-piggy-bank me-2"></i>Tiết kiệm dự kiến</div>
                        <div class="value text-warning" id="pillSaving">@Model.MonthlySavings.ToString("N0")đ</div>
                    </div>
                </div>
            </div>

            <!-- Danh sách chi tiêu -->
            <div class="card minibit-card">
                <div class="card-header d-flex flex-wrap gap-2 align-items-center justify-content-between">
                    <h5 class="mb-0"><i class="fas fa-wallet me-2"></i>Danh sách chi tiêu</h5>
                    <!-- Filter -->
                    <div class="d-flex flex-wrap gap-2">
                        <select id="filterType" class="form-select form-select-sm">
                            <option value="day">Ngày</option>
                            <option value="week">Tuần</option>
                            <option value="month">Tháng</option>
                            <option value="range">Khoảng</option>
                        </select>

                        <input type="date" id="filterDate" class="form-control form-control-sm"
                               value="@DateTime.Today.ToString("yyyy-MM-dd")" />
                        <input type="week" id="filterWeek" class="form-control form-control-sm d-none" />
                        <input type="month" id="filterMonth" class="form-control form-control-sm d-none" />
                        <div class="d-flex gap-2 align-items-center">
                            <input type="date" id="filterFrom" class="form-control form-control-sm d-none" />
                            <span id="rangeSep" class="d-none">-</span>
                            <input type="date" id="filterTo" class="form-control form-control-sm d-none" />
                        </div>
                    </div>
                </div>

                <div class="card-body p-0">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Ngày</th>
                                <th>Mô tả</th>
                                <th>Danh mục</th>
                                <th>Loại</th>
                                <th class="text-end">Số tiền</th>
                                <th>Đánh giá</th>
                            </tr>
                        </thead>
                        <tbody id="transactionTableBody">
                            @* Nội dung sẽ được Ajax render *@
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Floating button (mobile) -->
            <button class="btn btn-primary sticky-add-btn d-md-none" data-bs-toggle="modal" data-bs-target="#addExpenseModal">
                <i class="fas fa-plus"></i>
            </button>
        </div>



        <!-- Goals Tab -->
        <div class="tab-pane fade" id="goals" role="tabpanel">
            <div class="card minibit-card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-bullseye me-2"></i>Thiết lập mục tiêu tiết kiệm
                    </h5>
                </div>
                <div class="card-body">
                    <form id="savingsGoalForm">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="goalName" class="form-label">Tên mục tiêu</label>
                                <input type="text" class="form-control" id="goalName"
                                       placeholder="Ví dụ: Tiết kiệm mua laptop" required>
                            </div>
                            <div class="col-md-6">
                                <label for="targetAmount" class="form-label">Mục tiêu tiết kiệm tổng (đ)</label>
                                <input type="number" class="form-control" id="targetAmount"
                                       placeholder="Nhập số tiền muốn tiết kiệm" min="0" required>
                            </div>
                            <div class="col-md-6">
                                <label for="startDate" class="form-label">Bắt đầu từ</label>
                                <input type="date" class="form-control" id="startDate" required>
                            </div>
                            <div class="col-md-6">
                                <label for="endDate" class="form-label">Kết thúc</label>
                                <input type="date" class="form-control" id="endDate" required>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary mt-3">Lưu mục tiêu</button>
                    </form>

                    <div class="mt-4" id="goalSummary" style="display: none;">
                        <div class="alert alert-info">
                            <h6 class="alert-heading">🎯 Mục tiêu đang active:</h6>
                            <p class="mb-1">Tên: <strong id="activeName"></strong></p>
                            <p class="mb-1">💰 Số tiền: <strong id="activeTarget"></strong></p>
                            <p class="mb-1">⏱️ Thời gian: <strong id="activePeriod"></strong></p>
                            <p class="mb-0">📊 Tiến độ: <strong id="activeProgress"></strong></p>
                        </div>
                    </div>

                    <h6 class="mt-4">📜 Các mục tiêu đã qua:</h6>
                    <ul class="list-group" id="pastGoals"></ul>

                </div>
            </div>
        </div>




        <!-- Analytics Tab -->
        <div class="tab-pane fade" id="analytics" role="tabpanel">
            <div class="card minibit-card">
                <div class="card-header d-flex align-items-center justify-content-between">
                    <h5 class="mb-0"><i class="fas fa-chart-line me-2"></i>Phân tích chi tiêu</h5>
                    <div class="text-muted small" id="analyticsRangeLabel"></div>
                </div>

                <div class="card-body">

                    <!-- Promo khi chưa Premium -->
                    <div id="premiumPromo" class="text-center py-5">
                        <i class="fas fa-crown fa-4x text-warning mb-4"></i>
                        <h3 class="mb-2">Tính năng Premium</h3>
                        <p class="text-muted mb-4">
                            Mở khóa biểu đồ, xu hướng và gợi ý tiết kiệm thông minh.
                        </p>
                        <button class="btn btn-premium btn-lg" id="unlockPremiumBtn">
                            <i class="fas fa-crown me-2"></i>Nâng cấp Premium - 29k/tháng
                        </button>
                    </div>

                    <!-- Nội dung Premium -->
                    <div id="premiumContent" style="display:none">

                        <!-- KPI Cards -->
                        <div class="row g-3 mb-3">
                            <div class="col-md-3">
                                <div class="kpi-card">
                                    <div class="kpi-label">Tổng chi tháng</div>
                                    <div class="kpi-value" id="kpiMonthTotal">0đ</div>
                                    <div class="kpi-sub" id="kpiMonthCompare">So với tháng trước: —</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="kpi-card">
                                    <div class="kpi-label">Chi trung bình/ngày</div>
                                    <div class="kpi-value" id="kpiAvgDay">0đ</div>
                                    <div class="kpi-sub text-success" id="kpiLimitHint">Trong giới hạn 🎯</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="kpi-card">
                                    <div class="kpi-label">Danh mục lớn nhất</div>
                                    <div class="kpi-value" id="kpiTopCat">—</div>
                                    <div class="kpi-sub" id="kpiTopCatAmt">0đ</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="kpi-card">
                                    <div class="kpi-label">Tỷ lệ “xấu”</div>
                                    <div class="kpi-value" id="kpiBadRate">0%</div>
                                    <div class="kpi-sub" id="kpiBadCount">0 giao dịch</div>
                                </div>
                            </div>
                        </div>

                        <!-- Charts -->
                        <div class="row g-4">
                            <div class="col-lg-6">
                                <div class="card shadow-sm h-100">
                                    <div class="card-header"><h6 class="mb-0">Theo danh mục</h6></div>
                                    <div class="card-body">
                                        <canvas id="chartByCategory" height="240"></canvas>
                                        <ul class="legend tiny mt-3" id="catLegend"></ul>
                                    </div>
                                </div>
                            </div>

                            <div class="col-lg-6">
                                <div class="card shadow-sm h-100">
                                    <div class="card-header"><h6 class="mb-0">Theo ngày (tháng này)</h6></div>
                                    <div class="card-body">
                                        <canvas id="chartByDay" height="240"></canvas>
                                    </div>
                                </div>
                            </div>

                            <div class="col-lg-5">
                                <div class="card shadow-sm h-100">
                                    <div class="card-header"><h6 class="mb-0">Top 5 danh mục</h6></div>
                                    <div class="card-body">
                                        <ol class="topcat" id="topCatList"></ol>
                                        <div class="smart-tip bg-success bg-opacity-10 p-3 rounded mt-3">
                                            <h6 class="text-success mb-1">💡 Gợi ý</h6>
                                            <p class="mb-0 small" id="tipSmart">—</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Bot Box -->
                        <div class="card shadow-sm mt-4" id="botBox">
                            <div class="card-header d-flex align-items-center">
                                <i class="fas fa-robot me-2 text-primary"></i>
                                <h6 class="mb-0">Trợ lý chi tiêu AI</h6>
                            </div>
                            <div class="card-body">
                                <!-- Lịch sử chat -->
                                <div id="chatHistory" class="border rounded p-3 mb-3"
                                     style="height:200px; overflow-y:auto; background:#fafafa">
                                    <div class="text-muted small">💬 Hỏi tôi bất cứ điều gì về chi tiêu của bạn...</div>
                                </div>

                                <!-- Quick question-->
                                <div class="mb-3">
                                    <div class="small text-muted mb-2">❓ Câu hỏi gợi ý:</div>
                                    <div id="quickQuestions" class="d-flex flex-wrap gap-2">
                                        <button class="btn btn-sm btn-outline-secondary">Chi tiêu tháng này so với tháng trước?</button>
                                        <button class="btn btn-sm btn-outline-secondary">Danh mục nào tốn nhiều tiền nhất?</button>
                                        <button class="btn btn-sm btn-outline-secondary">Tôi có thể tiết kiệm ở đâu?</button>
                                        <button class="btn btn-sm btn-outline-secondary">Xu hướng chi tiêu 6 tháng gần đây?</button>
                                    </div>
                                </div>

                                <!-- Input -->
                                <div class="input-group">
                                    <input type="text" id="chatInput" class="form-control" placeholder="Nhập câu hỏi...">
                                    <button class="btn btn-primary" id="sendChatBtn">
                                        <i class="fas fa-paper-plane"></i>
                                    </button>
                                </div>
                            </div>
                        </div>


                    </div><!-- /premiumContent -->

                </div>
            </div>
        </div>

        <!-- Add Expense Modal -->
        <div class="modal fade" id="addExpenseModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <form id="addExpenseForm">
                        <input type="hidden" id="transactionId" value=""> <!-- để biết là edit hay add -->
                        <div class="modal-header">
                            <h5 class="modal-title" id="modalTitle">Thêm chi tiêu</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-2">
                                <label>Số tiền</label>
                                <input type="number" class="form-control" id="expenseAmount" required>
                            </div>
                            <div class="mb-2">
                                <label>Danh mục</label>
                                <select class="form-select" id="expenseCategory" required>
                                    @foreach (var cat in Model.Categories)
                                    {
                                        <option value="@cat.CategoryId">@cat.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="mb-2">
                                <label>Mô tả</label>
                                <input type="text" class="form-control" id="expenseDescription">
                            </div>
                            <div class="mb-2">
                                <label>Ngày</label>
                                <input type="date" class="form-control" id="expenseDate" required>
                            </div>
                            <div class="mb-2">
                                <label>Loại</label><br>
                                <input type="radio" name="TransactionType" value="Good" checked> Good
                                <input type="radio" name="TransactionType" value="Bad"> Bad
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary" id="modalSubmit">Thêm</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Add Budget Modal -->
        <div class="modal fade" id="addBudgetModal" tabindex="-1" aria-labelledby="addBudgetModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <form id="addBudgetForm">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addBudgetModalLabel">Thêm Ngân sách</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                        </div>
                        <div class="modal-body">
                            <input type="hidden" id="userId" value="@User.FindFirst("UserId")?.Value" />

                            <div class="mb-3">
                                <label class="form-label">Số tiền ngân sách</label>
                                <input type="number" step="1000" id="amountLimit" class="form-control" required />
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Tháng bắt đầu</label>
                                    <input type="number" id="startMonth" min="1" max="12" class="form-control" required />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Tháng kết thúc</label>
                                    <input type="number" id="endMonth" min="1" max="12" class="form-control" required />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Năm</label>
                                <input type="number" id="year" min="2024" max="2100" class="form-control" required />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Lưu</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>




@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1"></script>
    <script>
                const categories = @Html.Raw(Json.Serialize(Model.Categories));
                const userId = @userIdFromSession;
                const isPremium = @isPremium;
    </script>
    <script>
        // Initialize data from server
        window.expensesData = @Html.Raw(Json.Serialize(Model.Transactions));
        window.savingsGoalData = @Html.Raw(Json.Serialize(Model.SavingsGoal));
        window.isPremium = @Html.Raw(Json.Serialize(Model.IsPremium));
    </script>

            <script>
                document.addEventListener("DOMContentLoaded", function () {

                    // Character message ngẫu nhiên
                    const messages = [
                        "Hãy ghi chi tiêu để quản lý ví tiền tốt hơn! 💡",
                        "Đừng quên đặt mục tiêu tiết kiệm nhé! 🎯",
                        "Bạn có thể giảm 10% ăn ngoài để tiết kiệm nhiều hơn 🍜",
                        "Tiết kiệm nhỏ, thành công lớn 💚"
                    ];
                    const characterMessage = document.getElementById("characterMessage");
                    if (characterMessage) {
                        const random = Math.floor(Math.random() * messages.length);
                        characterMessage.textContent = messages[random];
                    }

                    // Tab smooth scroll (Bootstrap có sẵn, nhưng thêm animation)
                    const triggerTabList = document.querySelectorAll('#mainTabs button');
                    triggerTabList.forEach(tab => {
                        tab.addEventListener('shown.bs.tab', (event) => {
                            document.querySelector(event.target.dataset.bsTarget)
                                .scrollIntoView({ behavior: 'smooth', block: 'start' });
                        });
                    });

                    // Premium content
                    const premiumPromo = document.getElementById("premiumPromo");
                    const premiumContent = document.getElementById("premiumContent");

                    if (premiumPromo && premiumContent) {
                        if (isPremium === 1) {
                            // User là Premium → hiển thị nội dung, ẩn promo
                            premiumPromo.style.display = "none";
                            premiumContent.style.display = "block";
                        } else {
                            // User không Premium → hiển thị promo, ẩn nội dung
                            premiumPromo.style.display = "block";
                            premiumContent.style.display = "none";
                        }

                        // Click nâng cấp Premium (demo)
                        premiumPromo.querySelector("button")?.addEventListener("click", () => {
                            premiumPromo.style.display = "none";
                            premiumContent.style.display = "block";
                        });
                    }
                });
            </script>


                <script>
                    async function loadAnalytics(userId) {
                    try {
                        const res = await fetch(`/api/analytics/monthly/${userId}`);
                        const data = await res.json();

                        // KPI
                        document.getElementById("kpiMonthTotal").textContent = data.totalMonth.toLocaleString() + 'đ';

                        const avgPerDay = data.avgPerDay || 0; // Lấy từ backend
                        const kpiAvgDayEl = document.getElementById("kpiAvgDay");
                        kpiAvgDayEl.textContent = Math.round(avgPerDay).toLocaleString('vi-VN') + "đ";

                        document.getElementById("kpiTopCat").textContent = data.topCategory?.name || '—';
                        document.getElementById("kpiTopCatAmt").textContent = data.topCategory?.amount.toLocaleString() + 'đ' || '0đ';
                        document.getElementById("kpiBadRate").textContent = data.badRate.toFixed(1) + '%';
                        document.getElementById("kpiBadCount").textContent = data.badCount + ' giao dịch';
                        document.getElementById("tipSmart").textContent = data.smartTip || '—';

                        // Top 5 categories
                        const top5List = document.getElementById("topCatList");
                        top5List.innerHTML = '';
                        data.top5.forEach(c => {
                            const li = document.createElement("li");
                            li.textContent = `${c.name}: ${c.amount.toLocaleString()}đ`;
                            top5List.appendChild(li);
                        });

                        // Chart theo category (Chart.js)
                        const catLabels = data.categories.map(c => c.name);
                        const catData = data.categories.map(c => c.amount);
                        new Chart(document.getElementById('chartByCategory'), {
                            type: 'pie',
                            data: {
                                labels: catLabels,
                                datasets: [{
                                    data: catData,
                                    backgroundColor: data.categories.map(c => c.color || getRandomColor())
                                }]
                            }
                        });

                        // Chart theo ngày
                        const dayLabels = data.daily.map(d => d.day);
                        const dayData = data.daily.map(d => d.amount);
                        new Chart(document.getElementById('chartByDay'), {
                            type: 'bar',
                            data: {
                                labels: dayLabels,
                                datasets: [{ data: dayData, backgroundColor: '#007bff' }]
                            }
                        });

                    } catch (err) {
                        console.error("Không thể load analytics:", err);
                    }
                }

                // Random màu cho category nếu không có
                function getRandomColor() {
                    return '#' + Math.floor(Math.random()*16777215).toString(16);
                }

                
                loadAnalytics(userId;
            </script>


            @* filter date và render dữ liệu *@
            <script>
                function toggleFilterInputs() {
                    const type = document.getElementById('filterType').value;

                    // Ẩn hết
                    document.getElementById('filterDate').classList.add('d-none');
                    document.getElementById('filterWeek').classList.add('d-none');
                    document.getElementById('filterMonth').classList.add('d-none');
                    document.getElementById('filterFrom').classList.add('d-none');
                    document.getElementById('filterTo').classList.add('d-none');
                    document.getElementById('rangeSep').classList.add('d-none');

                    // Hiện theo loại
                    if (type === "day") {
                        document.getElementById('filterDate').classList.remove('d-none');
                    } else if (type === "week") {
                        document.getElementById('filterWeek').classList.remove('d-none');
                    } else if (type === "month") {
                        document.getElementById('filterMonth').classList.remove('d-none');
                    } else if (type === "range") {
                        document.getElementById('filterFrom').classList.remove('d-none');
                        document.getElementById('filterTo').classList.remove('d-none');
                        document.getElementById('rangeSep').classList.remove('d-none');
                    }
                }

                async function loadTransactions() {
                    const type = document.getElementById('filterType').value;
                    let url = "/Home/GetTransactions?";

                    if (type === "day") {
                        const date = document.getElementById('filterDate').value;
                        url += `type=day&date=${date}`;
                    }
                    else if (type === "week") {
                        const week = document.getElementById('filterWeek').value; // ví dụ "2025-W38"
                        url += `type=week&week=${week}`;
                    }
                    else if (type === "month") {
                        const month = document.getElementById('filterMonth').value; // ví dụ "2025-09"
                        url += `type=month&month=${month}`;
                    }
                    else if (type === "range") {
                        const from = document.getElementById('filterFrom').value;
                        const to = document.getElementById('filterTo').value;
                        url += `type=range&from=${from}&to=${to}`;
                    }

                    try {
                        const response = await fetch(url);
                        if (!response.ok) throw new Error("Lỗi tải dữ liệu");
                        const data = await response.json();
                        renderTransactions(data);
                    } catch (err) {
                        console.error(err);
                    }
                }

                function renderTransactions(transactions) {
                    const tbody = document.getElementById("transactionTableBody");
                    tbody.innerHTML = "";

                    if (!transactions || transactions.length === 0) {
                        tbody.innerHTML = `<tr><td colspan="5" class="text-center">Không có dữ liệu</td></tr>`;
                        return;
                    }

                    transactions.forEach(t => {
                        const tr = document.createElement("tr");

                        let ratingIcon = "";
                        if (t.transactionType === "Good") {
                            ratingIcon = '<i class="fas fa-thumbs-up text-success"></i>';
                        } else if (t.transactionType === "Bad") {
                            ratingIcon = '<i class="fas fa-thumbs-down text-danger"></i>';
                        } else {
                            ratingIcon = '<i class="fas fa-circle text-secondary"></i>'; // null → tròn xám
                        }

                        tr.innerHTML = `
                            <td class="date-cell" data-date="${t.transactionDate ? new Date(t.transactionDate).toISOString().split('T')[0] : ''}">
                                ${t.transactionDate ? new Date(t.transactionDate).toLocaleDateString() : ""}
                            </td>
                            <td class="description-cell">${t.description ?? ""}</td>
                            <td>
                                <select class="form-select form-select-sm category-select" data-id="${t.transactionId}">
                                    ${categories.map(c => `
                                        <option value="${c.categoryId}" ${t.categoryId === c.categoryId ? "selected" : ""}>
                                            ${c.name}
                                        </option>
                                    `).join("")}
                                </select>
                            </td>
                            <td>Chi tiêu</td>
                            <td class="text-end amount-cell">
                                <span class="amount-value ${t.amount < 0 ? "text-danger" : "text-success"}">
                                    ${t.amount?.toLocaleString() ?? 0}đ
                                </span>
                            </td>
                            <td class="text-center">
                                <span class="rating-icon" data-id="${t.transactionId}" data-type="${t.transactionType ?? ""}">
                                    ${ratingIcon}
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-primary me-1 update-btn" data-id="${t.transactionId}">Update</button>
                                <button class="btn btn-sm btn-danger delete-btn" data-id="${t.transactionId}">Delete</button>
                            </td>
                        `;

                        tbody.appendChild(tr);
                    });
                }


                // Event change filter type
                document.getElementById('filterType').addEventListener('change', () => {
                    toggleFilterInputs();
                    loadTransactions();
                });

                // Event khi chọn input filter (day/week/month/range)
                document.querySelectorAll('#filterDate, #filterWeek, #filterMonth, #filterFrom, #filterTo')
                    .forEach(el => {
                        el.addEventListener('change', () => loadTransactions());
                    });

                // Chạy khi load trang
                window.addEventListener('DOMContentLoaded', () => {
                    toggleFilterInputs();
                    loadTransactions();
                });
            </script>

            <script>
                // Hàm định dạng tin nhắn và xóa mọi dấu *
                function formatMessageText(responseText) {
                    if (!responseText) return "";
                    // 1. Xóa tất cả dấu *
                    const clean = responseText.replace(/\*/g, "");
                    // 2. Chuyển mỗi dòng thành <p>
                    return clean
                        .split("\n")
                        .map(line => line.trim())
                        .filter(line => line.length > 0)
                        .map(line => `<p>${line}</p>`)
                        .join("");
                }

                    // 3. Xuống dòng thành <p>
                    return clean
                        .split("\n")
                        .map(line => line.trim())
                        .filter(line => line.length > 0)
                        .map(line => `<p>${line}</p>`)
                        .join("");
                }

                document.getElementById("sendChatBtn").addEventListener("click", async () => {
                    const input = document.getElementById("chatInput");
                    const history = document.getElementById("chatHistory");
                    const question = input.value.trim();
                    if (!question) return;

                    // Hiển thị câu hỏi của user
                    history.innerHTML += `
                        <div class="text-end mb-2">
                            <span class="badge bg-primary">${question}</span>
                        </div>`;
                    input.value = "";
                    history.scrollTop = history.scrollHeight;

                    try {
                        // Gọi API bot
                        const res = await fetch(`/api/AI/advice/${userId}`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(question)
                        });
                        const data = await res.json();
                        console.log("👉 Data từ server:", data);

                        // Hiển thị câu trả lời
                        history.innerHTML += `
                             <div class="text-start mb-2">
                                <div class="p-2 rounded bg-light text-dark" style="white-space: normal;">
                                    ${formatMessageText(data.advice)}
                                </div>
                            </div>`;
                        history.scrollTop = history.scrollHeight;
                    } catch (e) {
                        history.innerHTML += `<div class="text-danger small">❌ Lỗi kết nối bot</div>`;
                    }
                });

                // Quick question click handler
                document.querySelectorAll("#quickQuestions button").forEach(btn => {
                    btn.addEventListener("click", () => {
                        document.getElementById("chatInput").value = btn.textContent;
                        document.getElementById("sendChatBtn").click();
                    });
                });
            </script>

            <script>
                
                document.addEventListener("change", async (e) => {
                    if (e.target.classList.contains("category-select")) {
                        const transactionId = parseInt(e.target.dataset.id);   // ép về int
                        const newCategoryId = parseInt(e.target.value);

                                        console.log("Sending update:", {
                    transactionId: transactionId,
                    categoryId: newCategoryId
                });
                        try {
                            const response = await fetch("/Home/UpdateTransactionCategory", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    transactionId: transactionId,
                                    categoryId: newCategoryId
                                })
                            });

                            if (!response.ok) {
                                throw new Error("Request lỗi " + response.status);
                            }

                            const result = await response.json();

                            if (!result.success) {
                                throw new Error("Lỗi cập nhật danh mục");
                            }

                            console.log(`Transaction ${transactionId} đã đổi sang category ${newCategoryId}`);

                        } catch (err) {
                            console.error(err);
                            alert("Không thể cập nhật danh mục");
                        }
                    }
                });
            </script>

            @* Toogle Icon Type *@
            <script>

                 document.addEventListener("click", async (e) => {
                    const target = e.target;

                    // ===== Rating toggle =====
                    const span = target.closest(".rating-icon");
                    if (span) {
                        let type = span.dataset.type; // null / Good / Bad

                        // Toggle logic: null → Good → Bad → Good ↔ Bad
                        if (!type) type = "Good";
                        else if (type === "Good") type = "Bad";
                        else if (type === "Bad") type = "Good";

                        // Update icon ngay lập tức
                        span.dataset.type = type;
                        span.innerHTML = type === "Good"
                            ? '<i class="fas fa-thumbs-up text-success"></i>'
                            : '<i class="fas fa-thumbs-down text-danger"></i>';

                        // Gửi fetch POST lên server
                        try {
                            const res = await fetch("/Home/UpdateTransactionType", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    transactionId: parseInt(span.dataset.id),
                                    transactionType: type
                                })
                            });
                            const data = await res.json();
                            if (!data.success) throw new Error(data.message || "Không thể cập nhật TransactionType");
                        } catch (err) {
                            console.error(err);
                            alert(err.message);
                        }
                        return;
                    }

                    // ===== Update transaction =====
                    if (target.classList.contains("update-btn")) {
                        const row = target.closest("tr");
                        const transactionId = target.dataset.id;
                        const amountText = row.querySelector(".amount-cell .amount-value").textContent;
                        const amount = parseFloat(amountText.replace("đ", "").replaceAll(",", ""));
                        const description = row.querySelector(".description-cell").textContent;
                        const categoryId = row.querySelector(".category-select").value;
                        const date = row.querySelector(".date-cell").dataset.date;
                        const type = row.querySelector(".rating-icon").dataset.type || "Good";

                        // Điền vào modal
                        document.getElementById("transactionId").value = transactionId;
                        document.getElementById("expenseAmount").value = amount;
                        document.getElementById("expenseDescription").value = description;
                        document.getElementById("expenseCategory").value = categoryId;
                        document.getElementById("expenseDate").value = date;
                        document.querySelector(`input[name="TransactionType"][value="${type}"]`).checked = true;

                        bootstrap.Modal.getOrCreateInstance(document.getElementById("addExpenseModal")).show();
                        return;
                    }

                    // ===== Delete transaction =====
                    if (target.classList.contains("delete-btn")) {
                        const transactionId = parseInt(target.dataset.id);
                        if (!confirm("Bạn có chắc muốn xóa giao dịch này?")) return;

                        try {
                            const res = await fetch("/Home/DeleteTransaction", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ transactionId })
                            });
                            const data = await res.json();
                            if (!data.success) throw new Error(data.message || "Xóa thất bại");
                            target.closest("tr").remove();
                            console.log(`Transaction ${transactionId} đã bị xóa`);
                        } catch (err) {
                            console.error(err);
                            alert(err.message);
                        }
                        return;
                    }
                });

                // ===== Thêm / Chỉnh sửa transaction =====
                document.getElementById("addExpenseForm").addEventListener("submit", async (e)=>{
                    e.preventDefault();

                    const transactionId = document.getElementById("transactionId")?.value || null;
                    const transaction = {
                        TransactionId: transactionId ? parseInt(transactionId) : 0, // 0 => thêm mới
                        Amount: Number(document.getElementById("expenseAmount").value),
                        CategoryId: parseInt(document.getElementById("expenseCategory").value),
                        Description: document.getElementById("expenseDescription").value,
                        TransactionDate: document.getElementById("expenseDate").value,
                        TransactionType: document.querySelector('input[name="TransactionType"]:checked').value
                    };

                    const url = transactionId ? "/Home/UpdateTransaction" : "/Home/AddTransaction";

                    try {
                        const res = await fetch(url, {
                            method:"POST",
                            headers:{"Content-Type":"application/json"},
                            body: JSON.stringify(transaction)
                        });
                        const data = await res.json();
                        if (!data.success) throw new Error(data.message || "Thất bại");

                        bootstrap.Modal.getInstance(document.getElementById("addExpenseModal")).hide();
                        e.target.reset();
                        await loadTransactions(); // fetch lại bảng
                    } catch (err) {
                        console.error(err);
                        alert(err.message);
                    }
                });
            </script>


            <script>
                $(document).ready(function () {
                    const userId = @userIdFromSession; 

                    // Load goals khi vào tab
                    loadGoals(userId);

                    // Submit form tạo goal
                    $("#savingsGoalForm").submit(function (e) {
                        e.preventDefault();

                        const startDate = $("#startDate").val();
                        const endDate = $("#endDate").val();

                        if (!startDate || !endDate) {
                            alert("Vui lòng nhập đầy đủ ngày bắt đầu và kết thúc!");
                            return;
                        }

                        if (new Date(endDate) < new Date(startDate)) {
                            alert("Ngày kết thúc phải sau ngày bắt đầu!");
                            return;
                        }

                        const data = {
                            userId: userId,
                            name: $("#goalName").val(),
                            targetAmount: Number($("#targetAmount").val()),
                            currentAmount: 0,
                            startDate: startDate,
                            endDate: endDate,
                            status: "open"
                        };

                        console.log("📤 Submitting goal:", data);

                        $.ajax({
                            url: "/api/goals/create",
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(data),
                            success: function (res) {
                                alert("Lưu thành công!");
                                loadGoals(userId);
                                $("#savingsGoalForm")[0].reset();
                            },
                            error: function (err) {
                                console.error("❌ Error creating goal:", err);
                                alert("Có lỗi khi lưu!");
                            }
                        });
                    });


                    // Hàm load goals
                    function loadGoals(userId) {
                        // Load active goal
                        $.ajax({
                            url: `/api/goals/active`, // bỏ userId
                            type: "GET",
                            success: function (res) {
                                if (!res) {
                                    $("#goalSummary").hide();
                                } else {
                                    $("#goalSummary").show();
                                    $("#activeName").text(res.goalName ?? "");
                                    $("#activeTarget").text((res.targetAmount ?? 0).toLocaleString("vi-VN") + "đ");

                                    const start = res.startDate ? new Date(res.startDate).toLocaleDateString("vi-VN") : "";
                                    const end = res.endDate ? new Date(res.endDate).toLocaleDateString("vi-VN") : "";
                                    $("#activePeriod").text(start && end ? `${start} → ${end}` : "");

                                    $("#activeProgress").text((res.progressPercent ?? 0).toFixed(0) + "%");
                                }
                            },
                            error: function () { $("#goalSummary").hide(); }
                        });

                        // Load all user goals
                        $.ajax({
                            url: `/api/goals/user`, // bỏ userId
                            type: "GET",
                            success: function (goals) {
                                $("#pastGoals").empty();
                                if (!goals || goals.length === 0) {
                                    $("#pastGoals").append(`<li class="list-group-item">Chưa có mục tiêu nào</li>`);
                                } else {
                                    const today = new Date();
                                    goals.forEach(g => {
                                        const endDate = g.endDate ? new Date(g.endDate) : null;
                                        if (endDate && endDate < today) { // past goal
                                            const startDate = g.startDate ? new Date(g.startDate).toLocaleDateString("vi-VN") : "";
                                            const endStr = endDate.toLocaleDateString("vi-VN");
                                            $("#pastGoals").append(`
                                                <li class="list-group-item">
                                                    🎯 <strong>${g.name}</strong>
                                                    - 💰 ${(g.targetAmount ?? 0).toLocaleString("vi-VN")}đ
                                                    - ⏱️ ${startDate} → ${endStr}
                                                </li>
                                            `);
                                        }
                                    });
                                    if ($("#pastGoals").children().length === 0) {
                                        $("#pastGoals").append(`<li class="list-group-item">Chưa có mục tiêu nào</li>`);
                                    }
                                }
                            },
                            error: function () {
                                $("#pastGoals").empty().append(`<li class="list-group-item">Không thể load goals!</li>`);
                            }
                        });
                    }
                });
            </script>

            <script>
                // add budget
                document.getElementById("addBudgetForm").addEventListener("submit", async (e) => {
                    e.preventDefault();

                    const data = {
                        userId: userId,
                        amountLimit: parseFloat(document.getElementById("amountLimit").value),
                        startMonth: parseInt(document.getElementById("startMonth").value),
                        endMonth: parseInt(document.getElementById("endMonth").value),
                        year: parseInt(document.getElementById("year").value)
                    };

                    try {
                        const res = await fetch("/api/budget/add-range", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(data)
                        });

                        if (res.ok) {
                            alert("Thêm ngân sách thành công!");
                            location.reload(); // reload lại để cập nhật view
                        } else {
                            const err = await res.json();
                            alert("Lỗi: " + (err.title || "Không thể thêm ngân sách"));
                        }
                    } catch (error) {
                        console.error("Error:", error);
                        alert("Có lỗi khi gọi API.");
                    }
                });
            </script>

            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    const urlParams = new URLSearchParams(window.location.search);
                    const tab = urlParams.get("tab");

                    if (tab) {
                        const tabButton = document.querySelector(`#${tab}-tab`);
                        if (tabButton) {
                            new bootstrap.Tab(tabButton).show();
                        }
                    }
                });
            </script>

}

<link href="~/css/MinibitCharacter.css" rel="stylesheet" />